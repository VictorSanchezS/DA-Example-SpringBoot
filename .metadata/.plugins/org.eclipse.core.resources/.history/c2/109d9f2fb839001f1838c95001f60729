package com.asistencia.empleados.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.asistencia.empleados.entity.Area;
import com.asistencia.empleados.exception.GeneralServiceException;
import com.asistencia.empleados.exception.NoDataServiceException;
import com.asistencia.empleados.exception.ValidateServiceException;
import com.asistencia.empleados.repository.AreaRepository;
import com.asistencia.empleados.service.AreaService;
import com.asistencia.empleados.validator.AreaValidator;

@Service
public class AreaServiceImpl implements AreaService {
	@Autowired
	private AreaRepository repository;

	@Override
	@Transactional(readOnly = true)
	public List<Area> findAll() {
		try {
			return repository.findAll();
		} catch (Exception e) {
			throw e;
		}
	}

	@Override
	@Transactional(readOnly = true)
	public Area findById(int id) {
		try {
			Area categoriaDb = repository.findById(id)
					.orElseThrow(() -> new ValidateServiceException("No hay un registro con ese ID"));

			return categoriaDb;

		} catch (ValidateServiceException e) {
			throw e;
		} catch (Exception e) {
			throw new GeneralServiceException("Error en el servidor");
		}
	}

	@Override
	@Transactional(readOnly = true)
	public Area findByNombre(String nombre) {
		try {
			return repository.findByNombre(nombre);
		} catch (Exception e) {
			throw e;
		}
	}

	@Override
	@Transactional(readOnly = true)
	public List<Area> findByNombreContaining(String nombre) {
		try {
			return repository.findByNombreContaining(nombre);
		} catch (Exception e) {
			throw e;
		}
	}

	@Override
	@Transactional
	public Area create(Area obj) {
		try {
			AreaValidator.save(obj);
			Area categoria = findByNombre(obj.getNombre());
			if (categoria != null) {
				throw new ValidateServiceException("Ya hay un registro con ese nombre");
			}
			//obj.setActivo(true);
			return repository.save(obj);
		} catch (ValidateServiceException e) {
			throw new ValidateServiceException(e.getMessage());
		} catch (Exception e) {
			throw new GeneralServiceException("Error en el servidor");
		}
	}

	@Override
	@Transactional
	public Area update(Area obj) {
		try {
			AreaValidator.save(obj);
			Area categoriaDb = findById(obj.getId());
			// Validamos si ya existe el registro con ese nombre
			Area categoria = findByNombre(obj.getNombre());
			if (categoria != null && obj.getId() != categoria.getId()) {
				throw new ValidateServiceException("Ya hay un registro con ese nombre");
			}
			categoriaDb.setNombre(obj.getNombre());
			return repository.save(categoriaDb);

		} catch (ValidateServiceException e) {
			throw new ValidateServiceException(e.getMessage());
		} catch (Exception e) {
			throw new GeneralServiceException("Error en el servidor");
		}
	}

	@Override
	@Transactional
	public int delete(int id) {
		try {
			Area categoriaDb = findById(id);
			if (categoriaDb == null) {
				return 0;
			} else {
				repository.delete(categoriaDb);
				return 1;
			}
		} catch (Exception e) {
			throw e;
		}
	}

}
